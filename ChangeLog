5-29-19
- kill command while stopped at exception won't deadlock anymore
- concat does not use the pointer passed to realloc anymore
- no more jumbled error messages while settings breakpoints or watchpoints
- Ctrl-C and interrupt command send SIGSTOP instead of SIGINT now
- keep checking if ptrace sets errno to EBUSY to make sure we detach properly
- gather & reply to pending exceptions upon detach

5-27-19
- hardware breakpoints/watchpoints work on multithreaded programs
- much more reliable exception handling, guarded by locks instead of being
racy
- Ctrl-C sends SIGINT to debuggee instead of just suspending it now, same with
cmdfunc_interrupt
- iosdbg prompt shouldn't duplicate anymore
- return CMD_QUIT in cmdfunc_quit instead of exit(0)

5-21-19
- can use hex in count argument for memory find

5-13-19
- simulate user commands when needed
- add 'interrupt' command

5-12-19
- asprintf --> concat
- fixed up memutils.c
- parse_args --> parse_and_create_args

5-11-19
- fixing more memory leaks
- put command line processing in its own file, preparing for user-defined
commands

5-9-19
- free used args, fixing memory leaks

5-8-19
- another completer bug fixed, was confused when commands and arguments were
the same

5-7-19
- support for tab command completion in the help command and re-adjusted help cmd regex to agree with this change
- help command shows all top level commands when no arguments are provided
commands
- can run shell commands within debugger by putting '!' at beginning of the
input line

5-6-19
- commands which don't have anything to audit shouldn't have audit functions

5-5-19
- add macros that wrap arguments to create_(parent|child)_cmd for clarity
- parse_expr renamed to eval_expr

5-4-19
- re-add ability to delete all breakpoints/watchpoints
- iosdbg no longer auto-adds ASLR, instead the ASLR slide is stored in $ASLR
- finished command refactor
- use rl_display_match_list for sub-commands in documentation_for_cmd
- renamed commands:
	- regs --> register
	- var --> variable

5-3-19
- new command: memory find

5-2-19
- continuing to refactor commands

4-30-19
- refactoring commands...
- rename break and watch to breakpoint and watchpoint
- fix command completer bug

4-26-19
- rewrote cmdfunc_kill so iosdbg handles this SIGKILL like any other
- improved watchpoint regex
- fixed a horrible, horrible bug with the way I handle command arguments
- fix 'regs gen' when no arguments are given

4-23-19
- no more .*sprintf undefined behavior concatenation nonsense

4-21-19
- greatly improved command system
- other bug fixes

4-14-19
- finished implementing signal settings

4-11-19
- finished implementing readline tab completion/new command completion system

4-6-19
- almost done implementing new command completion system

4-5-19
- take advantage of readline powered tab completion
- remove execute_command

3-23-19
- new regex based argument system
- proper documentation for commands

3-10-19
- no more complicated logic when handling the case of single stepping over a
breakpoint
- fix double "Process %d resuming" prints
- clean up the debuggee struct
- no more malloc(512) nonsense in procutils.c

3-9-19
- get rid of mach_catch_exception_raise, rewrite exception handling logic
- fix potential NULL pointer dereferences

3-6-19
- re-organize code, get rid of dbgutils.c/dbgutils.h

2-21-19
- cmdfunc args parameters are no longer const char *
- fix expr.c double free
- new command: unset, set a convenience variable to void

2-20-19
- fixed some memory leaks
- extended new error system to breakpoints and watchpoints
- fixed up the includes across the entire project
- get rid of atoi in dbgcmd.c

2-19-19
- convenience variables
- a way to force iosdbg to never add ASLR to expressions via convenience
variables
- rewrote and fixed the expression parser
- expression parser now supports registers and convenience variables
- much better, more descriptive, and more manageable error system
- a ton of cleanup

2-5-18
- ignore zombies in pid_of_program
- fix bug in examine command
- rename memutils_dump_memory_new
- new function to grab a general purpose register

2-2-18
- fix giant memory leak in expr.c by not incrementing the pointer and instead
using an index variable
- fixed many bugs and improved expr.c by a long run
- got rid of the unions I used to convert between types

1-27-18
- implemented an expression parser and included it throughout the debugger
- fixed setting wp_map all to -1 like I should have done when I did it for
breakpoint.c

1-24-19
- new argument to attach command, '--waitfor'
- can have a trace wait for iosdbg to be attached to something before starting
- fix use after free if we iosdbg quits while a trace is active
- other bug fixes

1-23-19
- added trace command and its functionality
- fixed a bug with passing kqid to death_server

1-21-19
- iosdbg can now catch Unix signals sent to debuggee
- replace mach messages with kqueues to tell if debuggee has died
- better exit messages for debuggee
- remove dead code in machthread
- tons and tons of bug fixes related to Unix signals
- changing focused thread while single stepping doesn't mess everything up now
- some cleanup

1-17-19
- can view memory at a general purpose register
- can write to a general purpose register or a floating point register
- can now view FPSR and FPCR
- ask user if they really want to kill debuggee
- fixed bug where resizing your terminal would constantly print duplicate
(iosdbg) prompt
- fixed up Readme

1-16-19
- fix last command repeat functionality
- proper floating point register viewing
- the output when viewing registers is much nicer
- now you can actually use a PID to attach
- dim LLDB-like prompt, so you can focus better
- compiler warnings fixed

1-15-19
- single stepping

1-14-19
- implement mach notifications correctly to check when debuggee dies
- deallocate debuggee->exception_port upon detach
- machthread implementation optimized
- command won't be added to history if line is empty
- repeat last command entered by hitting enter
- now you can reattach without detaching first

1-13-19
- fix disassemble command alias
- rewrite execute_command

1-12-19
- hardware watchpoints
- optimized code inside breakpoint.c
- optimized code inside watchpoint.c
- safe_reprompt, hopefully prevents double readline prompts
- disable single stepping on detach so debuggee does not crash
- options to delete all breakpoints or watchpoints

1-11-19
- I realized I was interpreting the ARMv8 instruction set manual wrong and
found out you can access debug registers in EL0 through kernel APIs
(thread_get/set_state), so I implemented hardware breakpoints.
iosdbg falls back to software breakpoints when there's no more debug registers available.
- much better and cleaner mach_catch_exception_raise
- no more temp breakpoints to re-enable a previously hit breakpoint thanks to
MDSCR_EL1's single stepping bit
- lots and lots of cleanup

1-9-19
- breakpointing on a branch works fully now

1-8-19
- fixed up watchpoints
- greatly improved breakpoints, no more bp_manager_thread nonsense
- cmdfunc_watch implemented formally
- other small fixes + improvements
- kill command fixed
- bzero -> memset

1-3-19
- watchpoints
- memory leak fixed
- rewrote memutils_buffer_to_number

1-2-19
- breakpoints are completely fixed. You no longer are stuck hitting the same
breakpoint over and over again
- disassembler incorporated into other parts of iosdbg
- fixed some more buffer overflows

1-1-19
- implemented Armadillo and its corresponding command
- fixed tons of stack/heap overflows
- rewrote the memory dumper again (memutils_dump_memory_new)
- fixed the Makefile

11-16-18
- make code more concise with "handlers", debuggee function pointers that
keep clutter in another file

11-12-18
- pid_of_program more concise

11-11-18
- fixed return value of get_thread_name_from_thread_port
- functions with no parameters now take now parameters
- pid_of_program is about 1000x faster

11-10-18
- added this ChangeLog
- added structure to the source code directories
- a much better Makefile to go with new organization
- (iosdbg) prompt restored after a function not called by me returned
- fixed crash that would happen if a breakpoint was attempted to be deleted
when iosdbg wasn't attached to anything
- new command: thread list, list threads from the debuggee
- new command: thread select, select a thread to focus on in the debuggee
- real thread ID is shown
- real thread name is shown
- fixed breakpoint race condition
- tons and tons of smaller bugfixes
